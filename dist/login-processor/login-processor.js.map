{"version":3,"sources":["../../src/login-processor/login-processor.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,gBAAgB,MAAM,0CAA0C,CAAC;AACxE,OAAO,cAAc,MAAM,sCAAsC,CAAC;AAClE,OAAO,UAAU,MAAM,4BAA4B,CAAC;AACpD,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AAErC,MAAM,CAAC,OAAO,WAAU,WAAW;IAAnC,iBA0CC;IAzCC,IAAI,OAAO,CAAC,yBAAyB,KAAK,IAAI,EAAE;QAC9C,IAAI,OAAO,CAAC,aAAa,IAAI,WAAW,EAAE;YACxC,WAAW,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC;SACtD;KACF;IACD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACjC,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,SAAS,CACrD,UAAA,OAAO;YACL,IAAI,MAAM,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;YAC7C,IAAA,4BAAyD,EAAvD,kBAAM,EAAE,gBAAK,EAAE,8BAAY,CAA6B;YAE9D,0BAA0B;YAC1B,KAAI,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC;YAC9B,IAAI,YAAY,CAAC,IAAI,EAAC;gBACpB,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,KAAG,IAAI,CAAC,CAAC,CAAC,WAAW,CAAA,CAAC,CAAC,SAAS,CAAC,CAAC;aACjF;iBAAM;gBACL,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACpC;YAED,kBAAkB;YAClB,IAAI,OAAO,CAAC,yBAAyB,KAAK,IAAI,EAAE;gBAC9C,IAAI,YAAY,IAAI,YAAY,CAAC,QAAQ,EAAE;oBACzC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBAC3B,OAAO,CAAC,aAAa,CAAC,cAAc,GAAG,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC;oBAC5E,OAAO,CAAC,aAAa,GAAG,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAA;iBAC7D;aACF;YAED,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC1B,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACpC,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtB,UAAU,CAAC,IAAI,CAAC,KAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;YAC5C,gBAAgB,CAAC,KAAK,CAAC,CAAC;YACxB,cAAc,CAAC,KAAK,CAAC,CAAC;YACtB,OAAO,CAAC,EAAC,IAAI,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC,CAAC;QAC/E,CAAC,EACD,UAAA,GAAG;YACD,MAAM,CAAC,GAAG,CAAC,CAAC;QACd,CAAC,CACF,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC","file":"login-processor.js","sourceRoot":"","sourcesContent":["import * as _ from \"lodash\";\r\nimport autoLogoutSetter from \"../auto-logout-setter/auto-logout-setter\";\r\nimport autoLockSetter from \"../auto-lock-setter/auto-lock-setter\";\r\nimport roleSetter from \"../role-setter/role-setter\";\r\nimport {configs} from '../_lib/vars';\r\n\r\nexport default function(credentials) {\r\n  if (configs.gettingSettingsFromServer === true) {\r\n    if (configs.serverSettngs && credentials) {\r\n      credentials['serverSettngs'] = configs.serverSettngs;\r\n    } \r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    this.http.post(configs.loginUrl, credentials).subscribe(\r\n      reqData => {\r\n        let fields = [\"routes\", \"token\", \"responseData\"];\r\n        let { routes, token, responseData } = _.pick(reqData, fields);\r\n        \r\n        // authentification status\r\n        this.auth = responseData.auth;\r\n        if (responseData.auth){\r\n          this.sessionStatus.next(responseData.auth.auth===true ? 'LOGGED_IN': 'NO_AUTH');\r\n        } else {\r\n          this.sessionStatus.next('NO_AUTH');\r\n        }\r\n\r\n        // server settings\r\n        if (configs.gettingSettingsFromServer === true) {\r\n          if (responseData && responseData.settings) {\r\n            autoLogoutSetter('remove');\r\n            configs.serverSettngs.sessionTimeout = responseData.settings.sessionTimeout;\r\n            configs.logoutTimeout = responseData.settings.sessionTimeout\r\n          }\r\n        }\r\n        \r\n        this.http.setToken(token);\r\n        let clone = _.omit(reqData, fields);\r\n        this.data.next(clone);\r\n        roleSetter.call(this, \"auth\", true, routes);\r\n        autoLogoutSetter(\"add\");\r\n        autoLockSetter(\"add\");\r\n        resolve({auth: (responseData.auth ? responseData.auth : 'ok'), data: clone});\r\n      },\r\n      err => {\r\n        reject(err);\r\n      }\r\n    );\r\n  });\r\n}\r\n"]}