{"version":3,"sources":["../../src/login-processor/login-processor.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,gBAAgB,MAAM,0CAA0C,CAAC;AACxE,OAAO,UAAU,MAAM,4BAA4B,CAAC;AACpD,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AAErC,MAAM,CAAC,OAAO,WAAU,WAAW;IAAnC,iBAyCC;IAxCC,EAAE,CAAC,CAAC,OAAO,CAAC,yBAAyB,KAAK,IAAI,CAAC,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;YAC1B,WAAW,CAAC,eAAe,CAAC,GAAG,OAAO,CAAC,aAAa,CAAC;QACvD,CAAC;IACH,CAAC;IACD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACjC,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,SAAS,CACrD,UAAA,IAAI;YACF,IAAI,MAAM,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;YAC7C,IAAA,yBAAsD,EAApD,kBAAM,EAAE,gBAAK,EAAE,8BAAY,CAA0B;YAE3D,0BAA0B;YAC1B,KAAI,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC;YAC9B,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA,CAAC;gBACrB,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,KAAG,IAAI,CAAC,CAAC,CAAC,WAAW,CAAA,CAAC,CAAC,SAAS,CAAC,CAAC;YAClF,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACrC,CAAC;YAED,kBAAkB;YAClB,EAAE,CAAC,CAAC,OAAO,CAAC,yBAAyB,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC/C,EAAE,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC1C,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBAC3B,OAAO,CAAC,aAAa,CAAC,cAAc,GAAG,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC;oBAC5E,OAAO,CAAC,aAAa,GAAG,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAA;gBAC9D,CAAC;YACH,CAAC;YAED,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC1B,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC5B,CAAC,CAAC,MAAM,CAAC,KAAI,EAAE,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;YACzB,UAAU,CAAC,IAAI,CAAC,KAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;YAC5C,gBAAgB,CAAC,KAAK,CAAC,CAAC;YACxB,OAAO,CAAC,EAAC,IAAI,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;QAC9E,CAAC,EACD,UAAA,GAAG;YACD,MAAM,CAAC,GAAG,CAAC,CAAC;QACd,CAAC,CACF,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC","file":"login-processor.js","sourceRoot":"","sourcesContent":["import * as _ from \"lodash\";\r\nimport autoLogoutSetter from \"../auto-logout-setter/auto-logout-setter\";\r\nimport roleSetter from \"../role-setter/role-setter\";\r\nimport {configs} from '../_lib/vars';\r\n\r\nexport default function(credentials) {\r\n  if (configs.gettingSettingsFromServer === true) {\r\n    if (configs.serverSettngs) {\r\n      credentials['serverSettngs'] = configs.serverSettngs;\r\n    } \r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    this.http.post(configs.loginUrl, credentials).subscribe(\r\n      data => {\r\n        let fields = [\"routes\", \"token\", \"responseData\"];\r\n        let { routes, token, responseData } = _.pick(data, fields);\r\n        \r\n        // authentification status\r\n        this.auth = responseData.auth;\r\n        if (responseData.auth){\r\n          this.sessionStatus.next(responseData.auth.auth===true ? 'LOGGED_IN': 'NO_AUTH');\r\n        } else {\r\n          this.sessionStatus.next('NO_AUTH');\r\n        }\r\n\r\n        // server settings\r\n        if (configs.gettingSettingsFromServer === true) {\r\n          if (responseData && responseData.settings) {\r\n            autoLogoutSetter('remove');\r\n            configs.serverSettngs.sessionTimeout = responseData.settings.sessionTimeout;\r\n            configs.logoutTimeout = responseData.settings.sessionTimeout\r\n          }\r\n        }\r\n        \r\n        this.http.setToken(token);\r\n        data = _.omit(data, fields);\r\n        _.extend(this, { data });\r\n        roleSetter.call(this, \"auth\", true, routes);\r\n        autoLogoutSetter(\"add\");\r\n        resolve({auth: (responseData.auth ? responseData.auth : 'ok'), data: data});\r\n      },\r\n      err => {\r\n        reject(err);\r\n      }\r\n    );\r\n  });\r\n}\r\n"]}