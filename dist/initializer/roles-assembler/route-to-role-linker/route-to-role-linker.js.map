{"version":3,"sources":["../../../../src/initializer/roles-assembler/route-to-role-linker/route-to-role-linker.ts"],"names":[],"mappings":"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","file":"route-to-role-linker.js","sourceRoot":"","sourcesContent":["import * as _          from 'lodash';\r\nimport {roles}         from '../../../_lib/vars';\r\nimport childrenGetter  from './_lib/children-getter';\r\nimport routeGetter     from './_lib/route-getter';\r\nimport routeSterilizer from './_lib/route-sterilizer';\r\n\r\nexport default function routeToRoleLinker(route, mainRoute?, parentRoute?, paths = []) {\r\n  let {role: routeRoleName, path, default: _default} = route;\r\n  let {role: parentRoleName} = parentRoute || {role: null};\r\n  let {children} = route;\r\n  let childlessRoute = _.omit(route, ['children']);\r\n\r\n  if(!routeRoleName) {\r\n    routeRoleName = parentRoleName || 'all';\r\n  }\r\n\r\n  if(_default) {\r\n    roles[routeRoleName]._default = [''].concat(paths, path).join('/');\r\n  }\r\n\r\n  if(!parentRoleName) {\r\n    roles[routeRoleName].routes.push(childlessRoute);\r\n  } else {\r\n    if(routeRoleName !== parentRoleName) {\r\n      let rootRoleName = paths.shift();\r\n      let {routes} = roles[routeRoleName];\r\n      let [roleRoute] = _.filter(routes, {path: rootRoleName});\r\n\r\n      if(!roleRoute) {\r\n        roleRoute = routeSterilizer(mainRoute, routeRoleName);\r\n        routes.push(roleRoute);\r\n      }\r\n\r\n      roleRoute = routeGetter(paths.slice(), roleRoute, mainRoute, routeRoleName);\r\n      roleRoute.children.push(childlessRoute);\r\n      \r\n      let children = childrenGetter(paths, mainRoute.children);\r\n      let [emptyMainRoute] = _.filter(children, {path: ''});\r\n      let [emptyRoleRoute] = _.filter(roleRoute.children, {path: ''});\r\n      \r\n      if(emptyMainRoute && !emptyRoleRoute) {\r\n        roleRoute.children.unshift({path: '', redirectTo: path, pathMatch: 'full'});\r\n      }\r\n    } else {\r\n      let {children = []} = parentRoute;\r\n      \r\n      if(_.isEmpty(children)) {\r\n        _.extend(parentRoute, {children});\r\n      }\r\n      \r\n      children.push(childlessRoute);\r\n    }\r\n  }\r\n  \r\n  _.each(children, child => {\r\n    let {role = routeRoleName || parentRoleName} = child;\r\n    _.extend(child, {role});\r\n    routeToRoleLinker(child, mainRoute || route, childlessRoute, paths.concat(path));\r\n  });\r\n}\r\n"]}