{"version":3,"sources":["../../src/logout-processor/logout-processor.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAgB,QAAQ,CAAC;AACtC,OAAO,gBAAgB,MAAM,0CAA0C,CAAC;AACxE,OAAO,UAAU,MAAY,4BAA4B,CAAC;AAC1D,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AAErC,MAAM,CAAC,OAAO,WAAU,UAAU;IAAlC,iBA8BC;IA7BC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,KAAK,WAAW,CAAC,CAAA,CAAC;QAC5C,MAAM,CAAC,CAAC,gBAAgB;IAC1B,CAAC;IACD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACjC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9C,UAAU,GAAG,aAAa,CAAC;QAC9B,CAAC;QACD,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,SAAS,EAAE,EAAC,UAAU,YAAA,EAAC,CAAC,CAAC,SAAS,CAC5D,UAAA,IAAI;YACF,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACT,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACtB,IAAM,gBAAgB,GAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC;gBACtF,EAAE,CAAC,CAAC,gBAAgB,KAAK,UAAU,CAAC,CAAC,CAAC;oBACpC,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC5C,CAAC;gBACD,CAAC,CAAC,MAAM,CAAC,KAAI,EAAE,EAAE,IAAI,MAAA,EAAC,CAAC,CAAC;gBACxB,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;QACH,CAAC,EACD,UAAA,GAAG;YACD,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC,CACF,CAAC;QACF,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAC3B,UAAU,CAAC,IAAI,CAAC,KAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAC9D,KAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;AACL,CAAC","file":"logout-processor.js","sourceRoot":"","sourcesContent":["import * as _           from \"lodash\";\r\nimport autoLogoutSetter from '../auto-logout-setter/auto-logout-setter';\r\nimport roleSetter       from '../role-setter/role-setter';\r\nimport {configs} from '../_lib/vars';\r\n\r\nexport default function(logoutCode) {\r\n  if (this.sessionStatus.value !== 'LOGGED_IN'){\r\n    return; // doing nothing\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    if ((!logoutCode) || (logoutCode.length === 0)) {\r\n       logoutCode = 'USER_LOGOUT';\r\n    }\r\n    this.http.post(this.configs.logoutUrl, {logoutCode}).subscribe(\r\n      data => {\r\n        if (data) {\r\n          this.auth = data.auth;\r\n          const returnLogoutCode =((data.auth) && (data.auth.code)) ? data.auth.code : 'LOGOUT';\r\n          if (returnLogoutCode !== logoutCode) {\r\n            this.sessionStatus.next(returnLogoutCode);\r\n          }\r\n          _.extend(this, { data});\r\n          resolve(data);\r\n        }\r\n      },\r\n      err => {\r\n        this.sessionStatus.next('LOGOUT_WITH_ERROR');\r\n        return reject(err);\r\n      }\r\n    );\r\n    this.sessionStatus.next(logoutCode);\r\n    autoLogoutSetter('remove');\r\n    roleSetter.call(this, 'noAuth', configs.logoutRedirctEnabled);\r\n    this.http.removeToken();\r\n  });\r\n}\r\n"]}