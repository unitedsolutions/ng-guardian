{"version":3,"sources":["../../src/auto-lock-setter/auto-lock-setter.ts"],"names":[],"mappings":"AAAA,OAAO,iBAAiB,MAAM,0BAA0B,CAAC;AACzD,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAEvC,gBAAe,UAAA,SAAS;IACtB,IAAI,OAAO,CAAC,eAAe,IAAI,IAAI,EAAE;QACnC,IAAI,YAAU,GAAG,SAAS,GAAG,eAAe,CAAC;QAC7C,IAAI,UAAU,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;QACjD,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;YAC1B,QAAQ,CAAC,YAAU,CAAC,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,IAAG,SAAS,KAAK,KAAK,EAAE;YACtB,QAAQ,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAClD;KACF;AACH,CAAC,EAAC","file":"auto-lock-setter.js","sourceRoot":"","sourcesContent":["import autoLogoutHandler from './_lib/auto-lock-handler';\r\nimport { configs } from '../_lib/vars';\r\n\r\nexport default operation => {\r\n  if (configs.lockDownEnabled == true) {\r\n    let methodName = operation + 'EventListener';\r\n    let eventNames = ['click', 'keyup', 'mousemove'];\r\n    eventNames.forEach(eventName => {\r\n      document[methodName](eventName, autoLogoutHandler);\r\n    });\r\n    \r\n    if(operation === 'add') {\r\n      document.dispatchEvent(new Event(eventNames[0]));\r\n    }\r\n  }\r\n};\r\n"]}