{"version":3,"sources":["../../src/role-setter/role-setter.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAc,QAAQ,CAAC;AACpC,OAAO,EAAC,KAAK,EAAC,MAAa,cAAc,CAAC;AAC1C,OAAO,cAAc,MAAM,mCAAmC,CAAC;AAC/D,OAAO,cAAc,MAAM,mCAAmC,CAAC;AAE/D,MAAM,CAAC,OAAO,WAAU,QAAQ,EAAE,QAAe,EAAE,cAAe;IAAhC,yBAAA,EAAA,eAAe;IAC/C,IAAI,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;IACvB,IAAA,cAAqD,EAApD,qBAAiB,EAAE,wBAAoB,CAAc;IACtD,IAAA,SAA4C,EAA3C,kCAAc,EAAE,kBAAM,EAAE,4BAAW,CAAS;IAC5C,IAAA,oBAAM,EAAE,wBAAQ,CAAS;IAE9B,EAAE,CAAA,CAAC,cAAc,CAAC,CAAC,CAAC;QAClB,IAAI,cAAc,GAAG,EAAC,QAAQ,EAAE,EAAE,EAAC,CAAC;QACpC,MAAM,GAAG,cAAc,CAAC,MAAM,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;QAChE,CAAE,kCAAQ,CAAmB,CAAC;IAChC,CAAC;IAED,EAAE,CAAA,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACb,QAAQ,GAAG,UAAU,CAAC;IACxB,CAAC;IAED,EAAE,CAAA,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACb,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;IAC3D,CAAC;IAED,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,EAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAC,CAAC,CAAC;IAEzD,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,IAAI,OAAX,MAAM,EAAS,SAAS,EAAE;QAC1B,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAC,CAAC,CAAC;QACjE,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAC,CAAC,CAAC;IAClD,CAAC;IAED,cAAc,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC;IACrE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAE3B,EAAE,CAAA,CAAC,QAAQ,CAAC,CAAC,CAAC;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;QACxB,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,IAAI,QAAQ,CAAC,EAAE,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC;IACjE,CAAC;AACH,CAAC;AAAA,CAAC","file":"role-setter.js","sourceRoot":"","sourcesContent":["import * as _         from 'lodash';\r\nimport {roles}        from '../_lib/vars';\r\nimport routesFilterer from './routes-filterer/routes-filterer';\r\nimport linksGenerator from './links-generator/links-generator';\r\n\r\nexport default function(roleName, navigate = true, approvedRoutes?) {\r\n  let role = roles[roleName];\r\n  let {routes: allRoutes, _default: allDefault} = roles.all;\r\n  let {linksPublisher, router, redirectUrl} = this;\r\n  let {routes, _default} = role;\r\n\r\n  if(approvedRoutes) {\r\n    let _defaultHolder = {_default: ''};\r\n    routes = routesFilterer(routes, approvedRoutes, _defaultHolder);\r\n    ({_default} = _defaultHolder);\r\n  }\r\n  \r\n  if(!_default) {\r\n    _default = allDefault;\r\n  }\r\n  \r\n  if(!_default) {\r\n    throw new Error('each role should have a default route');\r\n  }\r\n  \r\n  _.extend(this, {status: roleName, defaultUrl: _default});\r\n\r\n  if(!_.filter(routes, {path: ''}).length) {\r\n    routes.push(...allRoutes);\r\n    routes.push({path: '', pathMatch: 'full', redirectTo: _default});\r\n    routes.push({path: '**', redirectTo: _default});\r\n  }\r\n  \r\n  linksPublisher.next({role: roleName, links: linksGenerator(routes)});\r\n  router.resetConfig(routes);\r\n\r\n  if(navigate) {\r\n    delete this.redirectUrl;\r\n    router.navigate([redirectUrl || _default], {replaceUrl: true});\r\n  }\r\n};\r\n"]}