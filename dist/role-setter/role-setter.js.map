{"version":3,"sources":["../../src/role-setter/role-setter.ts"],"names":[],"mappings":"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","file":"role-setter.js","sourceRoot":"","sourcesContent":["import * as _         from 'lodash';\r\nimport {roles}        from '../_lib/vars';\r\nimport routesFilterer from './routes-filterer/routes-filterer';\r\nimport linksGenerator from './links-generator/links-generator';\r\nimport { NavItem } from '../_constructor/constructor';\r\n\r\nexport default function(roleName, navigate = true, approvedRoutes?) {\r\n  let role = roles[roleName];\r\n  let {routes: allRoutes, _default: allDefault} = roles.all;\r\n  let {linksPublisher, navLinks, router, redirectUrl} = this;\r\n  let {routes, _default} = role;\r\n\r\n  if(approvedRoutes) {\r\n    let _defaultHolder = {_default: ''};\r\n    routes = routesFilterer(routes, approvedRoutes, _defaultHolder);\r\n    ({_default} = _defaultHolder);\r\n  }\r\n  \r\n  if(!_default) {\r\n    _default = allDefault;\r\n  }\r\n  \r\n  if(!_default) {\r\n    throw new Error('each role should have a default route');\r\n  }\r\n  \r\n  _.extend(this, {status: roleName, defaultUrl: _default});\r\n\r\n  if(!_.filter(routes, {path: ''}).length) {\r\n    routes.push(...allRoutes);\r\n    routes.push({path: '', pathMatch: 'full', redirectTo: _default});\r\n    routes.push({path: '**', redirectTo: _default});\r\n  }\r\n  \r\n  let links = linksGenerator(routes);\r\n  linksPublisher.next({role: roleName, links: links});\r\n\r\n  // Generate navLinks\r\n  const authValidRoutes = [];\r\n  links.forEach(element => {\r\n    if (element.children) {\r\n      element.children.forEach(route => {\r\n        if (route.link) {\r\n          let path = route.path.length > 0 ? route.path : element.path;\r\n          authValidRoutes.push( new NavItem(route.group, route.label, path));\r\n        }\r\n      });\r\n    } else {\r\n      if (element.link) {\r\n        authValidRoutes.push( new NavItem(element.group, element.label, element.path));\r\n      }\r\n    }\r\n  });\r\n  const groupBy = function(xs, key) {\r\n    return xs.reduce(function(rv, x) {\r\n      (rv[x[key]] = rv[x[key]] || []).push(x);\r\n      return rv;\r\n    }, {});\r\n  };\r\n  const navLinksData = groupBy(authValidRoutes, 'parent');\r\n  navLinks.next(navLinksData);\r\n\r\n  router.resetConfig(routes);\r\n\r\n  if(navigate) {\r\n    delete this.redirectUrl;\r\n    router.navigate([redirectUrl || _default], {replaceUrl: true});\r\n  }\r\n};\r\n"]}